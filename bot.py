import os
import logging
from datetime import date
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from save_into_google_sheet import insert_info_into_sheet, account_map

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞


class AddressForm(StatesGroup):
    street = State()
    house = State()
    apartment = State()
    cold_water = State()
    electr = State()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞


class AccountForm(StatesGroup):
    account = State()
    address = State()
    apartment = State()
    cold_water = State()
    electr = State()


# –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ª–∏—Ü—ã
street_keyboard = InlineKeyboardMarkup(row_width=1)
streets = [
    "—É–ª. –†—ã–ª–µ–Ω–∫–æ–≤–∞",
    "—É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –ö–æ–Ω–æ–≤–Ω–∏—Ü—ã–Ω–∞",
    "—É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –ü–∞—Å–∫–µ–≤–∏—á–∞",
    "–ø—Ä-–¥ –°–æ–ª–æ–≤—å–∏–Ω–∞—è —Ä–æ—â–∞",
    "—É–ª. –ë—Ä—ã–ª–µ–≤–∫–∞"
]

for street in streets:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    street_keyboard.add(InlineKeyboardButton(
        text=street, callback_data=f"street_{street}"))
street_keyboard.add(InlineKeyboardButton(
    text="–ù–∞–∑–∞–¥", callback_data="meter_readings"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /menu


@dp.message_handler(commands=['start', 'menu'], state="*")
async def send_welcome(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è",
                             callback_data="meter_readings"),
        InlineKeyboardButton(text="–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç",
                             url="https://komfort67.com/index.php")
    )
    message_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!  
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏:  
‚Ä¢ –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ üìä‚ùÑÔ∏è‚ö°
‚Ä¢ –û—Ñ. —Å–∞–π—Ç –£–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –û–û–û –ö–æ–º—Ñ–æ—Ä—Ç-—Å–µ—Ä–≤–∏—Å ‚úÖ
    """
    await message.answer(message_text, reply_markup=keyboard, parse_mode="markdown")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É FSM

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤"


@dp.callback_query_handler(lambda c: c.data == 'meter_readings', state="*")
async def process_meter_readings(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ü–æ –∞–¥—Ä–µ—Å—É", callback_data="by_address"),
        InlineKeyboardButton("–ü–æ ‚Ññ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞", callback_data="by_account")
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n(–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu)",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ –∞–¥—Ä–µ—Å—É"


@dp.callback_query_handler(lambda c: c.data == 'by_address', state="*")
async def process_by_address(callback_query: types.CallbackQuery):
    message_text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ –∞–¥—Ä–µ—Å—É.\n–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É:"
    await bot.send_message(
        callback_query.from_user.id,
        message_text,
        reply_markup=street_keyboard,
        parse_mode="markdown"
    )
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data.startswith("street_"), state="*")
async def process_street(callback_query: types.CallbackQuery, state: FSMContext):
    street = callback_query.data.replace("street_", "")
    await state.update_data(street=street)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:")
    await AddressForm.house.set()
    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(state=AddressForm.house)
async def process_house(message: types.Message, state: FSMContext):
    await state.update_data(house=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    await AddressForm.apartment.set()


@dp.message_handler(state=AddressForm.apartment)
async def process_apartment(message: types.Message, state: FSMContext):
    await state.update_data(apartment=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã:")
    await AddressForm.cold_water.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã (–∞–¥—Ä–µ—Å)


@dp.message_handler(state=AddressForm.cold_water)
async def process_cold_water(message: types.Message, state: FSMContext):
    await state.update_data(cold_water=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:")
    await AddressForm.electr.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–∞–¥—Ä–µ—Å)


@dp.message_handler(state=AddressForm.electr)
async def process_electr(message: types.Message, state: FSMContext):
    await state.update_data(electr=message.text)
    data = await state.get_data()
    street = data.get('street', '').strip()
    house = data.get('house', '').strip()
    apartment = data.get('apartment', '').strip()
    cold_water = data.get('cold_water', '').strip()
    electr = data.get('electr', '').strip()
    result_message = (
        f"–ê–¥—Ä–µ—Å: {street}, –¥–æ–º ‚Ññ {house}\n"
        f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: –ö–≤. {apartment}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã: {cold_water}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏: {electr}\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª, "
        "–∏–Ω–∞—á–µ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ¬ª."
    )
    final_keyboard = InlineKeyboardMarkup(row_width=2)
    final_keyboard.add(
        InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                             callback_data="submit_data"),
        InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ",
                             callback_data="meter_readings")
    )
    await message.answer(result_message, reply_markup=final_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" (–∞–¥—Ä–µ—Å)


@dp.callback_query_handler(lambda c: c.data == 'submit_data', state="*")
async def process_submit(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    today = date.today().strftime("%d.%m.%Y")
    street = data.get('street', '').strip()
    house = data.get('house', '').strip()
    apartment = data.get('apartment', '').strip()
    cold_water = data.get('cold_water', '').strip()
    electr = data.get('electr', '').strip()
    if '.' in cold_water:
        cold_water = cold_water.replace('.', ',')
    answer = [today, None, f"{street}, –¥–æ–º ‚Ññ {house}",
              f"–ö–≤. {apartment}", cold_water, electr]
    result = await insert_info_into_sheet(answer)
    if result:
        await bot.send_message(callback_query.from_user.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        await bot.send_message(callback_query.from_user.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É (/menu)!")
    await state.finish()
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ ‚Ññ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞"


@dp.callback_query_handler(lambda c: c.data == 'by_account', state="*")
async def process_by_account(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ –ª–∏—Ü–µ–≤–æ–º—É —Å—á—ë—Ç—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞:",
        parse_mode="markdown"
    )
    await AccountForm.account.set()
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞


@dp.message_handler(state=AccountForm.account)
async def process_account(message: types.Message, state: FSMContext):
    account_text = message.text.strip()
    if not account_text.isdigit():
        await message.answer("–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    account = int(account_text)
    account_status = await account_map(account)
    if isinstance(account_status, bool):
        await message.answer("–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–∑ account_status
    await state.update_data(account=account, apartment=account_status[1], address=account_status[2])
    await message.answer(
        f"–õ–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
        f"–ê–¥—Ä–µ—Å: {account_status[2]}\n"
        f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {account_status[1]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã:"
    )
    await AccountForm.cold_water.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã (–ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç)


@dp.message_handler(state=AccountForm.cold_water)
async def process_account_cold_water(message: types.Message, state: FSMContext):
    await state.update_data(cold_water=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏:")
    await AccountForm.electr.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç)


@dp.message_handler(state=AccountForm.electr)
async def process_account_electr(message: types.Message, state: FSMContext):
    await state.update_data(electr=message.text.strip())
    data = await state.get_data()
    account = data.get('account')
    address = data.get('address')
    apartment = data.get('apartment')
    cold_water = data.get('cold_water')
    electr = data.get('electr')
    result_message = (
        f"–õ–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç: {account}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã: {cold_water}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏: {electr}\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª, "
        "–∏–Ω–∞—á–µ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ¬ª."
    )
    final_keyboard = InlineKeyboardMarkup(row_width=2)
    final_keyboard.add(
        InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                             callback_data="submit_data_account"),
        InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ",
                             callback_data="meter_readings")
    )
    await message.answer(result_message, reply_markup=final_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" (–ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç)


@dp.callback_query_handler(lambda c: c.data == 'submit_data_account', state="*")
async def process_submit_account(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    today = date.today().strftime("%d.%m.%Y")
    account = data.get('account', '')
    address = data.get('address', '')
    apartment = data.get('apartment', '')
    cold_water = data.get('cold_water', '').strip()
    electr = data.get('electr')
    if '.' in cold_water:
        cold_water = cold_water.replace('.', ',')
    answer = [today, account, address, apartment, cold_water, electr]
    result = await insert_info_into_sheet(answer)
    if result:
        await bot.send_message(callback_query.from_user.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    else:
        await bot.send_message(callback_query.from_user.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É (/menu)!")
    await state.finish()
    await bot.answer_callback_query(callback_query.id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
