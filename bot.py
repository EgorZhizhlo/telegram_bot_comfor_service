import os
import logging
from datetime import date
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from save_into_google_sheet import insert_info_into_sheet


# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –∞–¥—Ä–µ—Å–∞
class AddressForm(StatesGroup):
    street = State()
    house = State()
    apartment = State()
    reading = State()


# –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ª–∏—Ü—ã
street_keyboard = InlineKeyboardMarkup(row_width=1)
streets = [
    "—É–ª. –†—ã–ª–µ–Ω–∫–æ–≤–∞",
    "—É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –ö–æ–Ω–æ–≤–Ω–∏—Ü—ã–Ω–∞",
    "—É–ª. –ì–µ–Ω–µ—Ä–∞–ª–∞ –ü–∞—Å–∫–µ–≤–∏—á–∞",
    "–ø—Ä-–¥ –°–æ–ª–æ–≤—å–∏–Ω–∞—è —Ä–æ—â–∞",
    "—É–ª. –ë—Ä—ã–ª–µ–≤–∫–∞"
]

for street in streets:
    # –î–ª—è callback_data –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ª–µ–≥–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —É–ª–∏—Ü—É
    street_keyboard.add(InlineKeyboardButton(text=street, callback_data=f"street_{street}"))
street_keyboard.add(types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data="meter_readings"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /menu


@dp.message_handler(commands=['start', 'menu'], state="*")
async def send_welcome(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(
            text="–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è", callback_data="meter_readings"),
        types.InlineKeyboardButton(text="–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", url="https://komfort67.com/index.php")
    )
    message_text = """
    üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!  
–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏:  
–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã üìä‚ùÑÔ∏è  
–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –£–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –û–û–û –ö–æ–º—Ñ–æ—Ä—Ç-—Å–µ—Ä–≤–∏—Å ‚úÖ  
    """
    await message.answer(message_text, reply_markup=keyboard, parse_mode="markdown")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É FSM


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤"


@dp.callback_query_handler(lambda c: c.data == 'meter_readings', state="*")
async def process_meter_readings(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("–ü–æ –∞–¥—Ä–µ—Å—É", callback_data="by_address"),
        types.InlineKeyboardButton(
            "–ü–æ ‚Ññ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞", callback_data="by_account"),
    )
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n(–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu)", reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É FSM

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ –∞–¥—Ä–µ—Å—É"


@dp.callback_query_handler(lambda c: c.data == 'by_address', state="*")
async def process_by_address(callback_query: types.CallbackQuery):

    message_text = """
–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å—É.
–í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É:
    """

    await bot.send_message(
        callback_query.from_user.id,
        message_text,
        reply_markup=street_keyboard,
        parse_mode="markdown"
    )
    await bot.answer_callback_query(callback_query.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–ª–∏—Ü—ã
@dp.callback_query_handler(lambda c: c.data.startswith("street_"), state="*")
async def process_street(callback_query: types.CallbackQuery, state: FSMContext):
    street = callback_query.data.replace("street_", "")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É–ª–∏—Ü—É
    await state.update_data(street=street)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ ‚Ññ –¥–æ–º–∞:")
    await AddressForm.house.set()
    await bot.answer_callback_query(callback_query.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
@dp.message_handler(state=AddressForm.house)
async def process_house(message: types.Message, state: FSMContext):
    await state.update_data(house=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ‚Ññ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    await AddressForm.apartment.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
@dp.message_handler(state=AddressForm.apartment)
async def process_apartment(message: types.Message, state: FSMContext):
    await state.update_data(apartment=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã:")
    await AddressForm.reading.set()


@dp.message_handler(state=AddressForm.reading)
async def process_reading(message: types.Message, state: FSMContext):
    await state.update_data(reading=message.text)
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≤ FSM
    data = await state.get_data()
    street = data.get('street', '').strip()
    house = data.get('house', '').strip()
    apartment = data.get('apartment', '').strip()
    reading = data.get('reading', '').strip()
    result_message = (
        f"–ê–¥—Ä–µ—Å: {street}\n"
        f"–î–æ–º: {house}\n"
        f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: –ö–≤. {apartment}\n"
        f"–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã: {reading}"
    )
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏:
    final_keyboard = InlineKeyboardMarkup(row_width=2)
    final_keyboard.add(
        InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="submit_data"),
        InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="meter_readings")
    )
    await message.answer(result_message, reply_markup=final_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@dp.callback_query_handler(lambda c: c.data == 'submit_data', state="*")
async def process_submit(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    today = date.today().strftime("%d.%m.%Y")
    street = data.get('street', '').strip()
    house = data.get('house', '').strip()
    apartment = data.get('apartment', '').strip()
    reading = data.get('reading', '').strip()
    if reading.count('.') > 0:
        reading = reading.replace('.', ',')
    answer = [today, None, street + ", –¥–æ–º ‚Ññ " + house, "–ö–≤. " + apartment, reading]
    result = await insert_info_into_sheet(answer)
    if result:
        await bot.send_message(callback_query.from_user.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É FSM
        await bot.answer_callback_query(callback_query.id)
    else:
        await bot.send_message(callback_query.from_user.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É(/menu)!")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É FSM
        await bot.answer_callback_query(callback_query.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ ‚Ññ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞"


@dp.callback_query_handler(lambda c: c.data == 'by_account')
async def process_by_account(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ –ª–∏—Ü–µ–≤–æ–º—É —Å—á–µ—Ç—É")
    await bot.answer_callback_query(callback_query.id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
